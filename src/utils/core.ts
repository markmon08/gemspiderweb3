import { Spider, Player } from './types';

// Constants
const FEEDERS_PER_FEED = 7; // Base value, increases with level
const HYDRATION_PER_DRINK = 7; // Base value, increases with level
const TOKEN_GENERATION_RATE = 0.1; // Tokens generated per power point per hour

// Helper: Get feeders needed based on level
export const getFeedersNeeded = (level: number): number => {
  if (level <= 10) return 7;
  if (level <= 20) return 10;
  if (level <= 25) return 12;
  if (level <= 30) return 15;
  if (level <= 45) return 20;
  if (level <= 60) return 25;
  if (level <= 80) return 30;
  return 40; // Level 81-100
};

// Core System: Feed a spider
export const feedSpider = (spider: Spider, feeders: number): Spider => {
  const feedersNeeded = getFeedersNeeded(spider.level);
  if (feeders < feedersNeeded) {
    throw new Error('Not enough feeders');
  }

  return {
    ...spider,
    hunger: Math.min(100, spider.hunger + 20), // Increase hunger by 20%
    lastFed: new Date(),
  };
};

// Core System: Hydrate a spider
export const hydrateSpider = (spider: Spider, feeders: number): Spider => {
  const feedersNeeded = getFeedersNeeded(spider.level);
  if (feeders < feedersNeeded) {
    throw new Error('Not enough feeders');
  }

  return {
    ...spider,
    hydration: Math.min(100, spider.hydration + 20), // Increase hydration by 20%
    lastHydrated: new Date(),
  };
};

// Core System: Calculate tokens generated by a spider
export const calculateTokensGenerated = (spider: Spider): number => {
  if (spider.isHibernating) {
    return 0; // No tokens generated during hibernation
  }

  const now = new Date();
  const lastGenerationTime = spider.lastTokenGeneration || now;
  const timeElapsed = (now.getTime() - lastGenerationTime.getTime()) / (1000 * 60 * 60); // Time in hours

  const tokensGenerated = spider.power * TOKEN_GENERATION_RATE * timeElapsed;
  return tokensGenerated;
};

// Core System: Update player tokens based on all spiders
export const updatePlayerTokens = (player: Player): Player => {
  let totalTokensGenerated = 0;

  player.spiders.forEach((spider) => {
    const tokensGenerated = calculateTokensGenerated(spider);
    totalTokensGenerated += tokensGenerated;
    spider.lastTokenGeneration = new Date(); // Update the last generation time
  });

  return {
    ...player,
    balance: {
      ...player.balance,
      SPIDER: player.balance.SPIDER + totalTokensGenerated,
    },
  };
};
